--CREATE PROCEDURE [DBO].[USP_MONITORAMENTO_LOCKS]
--AS BEGIN
    
    IF (OBJECT_ID('DBO.TB_ALERTA') IS NULL)
    BEGIN

        CREATE TABLE DBO.TB_ALERTA (
            ID_ALERTA INT NOT NULL IDENTITY(1, 1),
            NM_ALERTA VARCHAR(200) NULL,
            DS_MENSAGEM VARCHAR(2000) NULL,
            FL_TIPO TINYINT NULL,
            DT_ALERTA DATETIME NULL DEFAULT (GETDATE())
        ) WITH (DATA_COMPRESSION = PAGE)

        ALTER TABLE DBO.TB_ALERTA ADD CONSTRAINT PK_TB_ALERTA PRIMARY KEY CLUSTERED (ID_ALERTA) WITH (DATA_COMPRESSION = PAGE)

    END


    IF (OBJECT_ID('TEMPDB..##MONITORAMENTO_LOCKS') IS NOT NULL) DROP TABLE ##MONITORAMENTO_LOCKS
    CREATE TABLE ##MONITORAMENTO_LOCKS
    (
        [NESTED_LEVEL] INT NULL,
        [SESSION_ID] INT NOT NULL,
        [LOGIN_NAME] NVARCHAR(128) NOT NULL,
        [HOST_NAME] NVARCHAR(128),
        [PROGRAM_NAME] NVARCHAR(128),
        [WAIT_INFO] NVARCHAR(128),
        [WAIT_TIME_MS] BIGINT,
        [BLOCKING_SESSION_ID] INT,
        [BLOCKED_SESSION_COUNT] INT,
        [OPEN_TRANSACTION_COUNT] INT NOT NULL
    )

    INSERT INTO ##MONITORAMENTO_LOCKS
    SELECT
		NULL AS NESTED_LEVEL,
		A.SESSION_ID AS SESSION_ID,
		A.LOGIN_NAME,
		A.[HOST_NAME],
		(CASE WHEN D.NAME IS NOT NULL THEN 'SQLAGENT - TSQL JOB (' + D.[NAME] + ' - ' + SUBSTRING(A.[PROGRAM_NAME], 67, LEN(A.[PROGRAM_NAME]) - 67) +  ')' ELSE A.[PROGRAM_NAME] END) AS [PROGRAM_NAME],
		'(' + CAST(COALESCE(E.WAIT_DURATION_MS, B.WAIT_TIME) AS VARCHAR(20)) + 'MS)' + COALESCE(E.WAIT_TYPE, B.WAIT_TYPE) + COALESCE((CASE 
			WHEN COALESCE(E.WAIT_TYPE, B.WAIT_TYPE) LIKE 'PAGE%LATCH%' THEN ':' + DB_NAME(LEFT(E.RESOURCE_DESCRIPTION, CHARINDEX(':', E.RESOURCE_DESCRIPTION) - 1)) + ':' + SUBSTRING(E.RESOURCE_DESCRIPTION, CHARINDEX(':', E.RESOURCE_DESCRIPTION) + 1, 999)
			WHEN COALESCE(E.WAIT_TYPE, B.WAIT_TYPE) = 'OLEDB' THEN '[' + REPLACE(REPLACE(E.RESOURCE_DESCRIPTION, ' (SPID=', ':'), ')', '') + ']'
			ELSE ''
		END), '') AS WAIT_INFO,
		COALESCE(E.WAIT_DURATION_MS, B.WAIT_TIME) AS WAIT_TIME_MS,
		NULLIF(B.BLOCKING_SESSION_ID, 0) AS BLOCKING_SESSION_ID,
		COALESCE(G.BLOCKED_SESSION_COUNT, 0) AS BLOCKED_SESSION_COUNT,
		A.OPEN_TRANSACTION_COUNT
    FROM SYS.DM_EXEC_SESSIONS AS A WITH (NOLOCK)
    LEFT JOIN SYS.DM_EXEC_REQUESTS AS B WITH (NOLOCK) ON A.SESSION_ID = B.SESSION_ID
    LEFT JOIN MSDB.DBO.SYSJOBS AS D ON RIGHT(D.JOB_ID, 10) = RIGHT(SUBSTRING(A.[PROGRAM_NAME], 30, 34), 10)
    LEFT JOIN (
				SELECT
					SESSION_ID, 
					WAIT_TYPE,
					WAIT_DURATION_MS,
					RESOURCE_DESCRIPTION,
					ROW_NUMBER() OVER(PARTITION BY SESSION_ID ORDER BY (CASE WHEN WAIT_TYPE LIKE 'PAGE%LATCH%' THEN 0 ELSE 1 END), WAIT_DURATION_MS) AS RANKING
				FROM SYS.DM_OS_WAITING_TASKS
	) E ON A.SESSION_ID = E.SESSION_ID AND E.RANKING = 1
    LEFT JOIN (
				SELECT
					BLOCKING_SESSION_ID,
					COUNT(*) AS BLOCKED_SESSION_COUNT
				FROM SYS.DM_EXEC_REQUESTS
				WHERE BLOCKING_SESSION_ID != 0
				GROUP BY
					BLOCKING_SESSION_ID
	) G ON A.SESSION_ID = G.BLOCKING_SESSION_ID
    WHERE A.SESSION_ID > 50
    AND A.SESSION_ID <> @@SPID
    AND (NULLIF(B.BLOCKING_SESSION_ID, 0) IS NOT NULL OR COALESCE(G.BLOCKED_SESSION_COUNT, 0) > 0)

-- SELECT * FROM ##MONITORAMENTO_LOCKS

    ------------------------------------------------
    -- GERA O NÍVEL DOS LOCKS
    ------------------------------------------------

    UPDATE ##MONITORAMENTO_LOCKS
    SET NESTED_LEVEL = 1
    WHERE BLOCKING_SESSION_ID IS NULL


    DECLARE @CONTADOR INT = 2

    WHILE((SELECT COUNT(*) FROM ##MONITORAMENTO_LOCKS WHERE NESTED_LEVEL IS NULL) > 0 AND @CONTADOR < 50)
    BEGIN
        

        UPDATE A
        SET A.NESTED_LEVEL = @CONTADOR
        FROM ##MONITORAMENTO_LOCKS A
        JOIN ##MONITORAMENTO_LOCKS B ON A.BLOCKING_SESSION_ID = B.SESSION_ID
        WHERE A.NESTED_LEVEL IS NULL
        AND B.NESTED_LEVEL = (@CONTADOR - 1)
		
        SET @CONTADOR += 1

    END

		UPDATE ##MONITORAMENTO_LOCKS
		SET NESTED_LEVEL = @CONTADOR
		WHERE NESTED_LEVEL IS NULL


		-- SELECT *  FROM ##MONITORAMENTO_LOCKS 
		-- SELECT * FROM TB_ALERTA

		-- ID PARA MONTAR O HTML
		ALTER TABLE ##MONITORAMENTO_LOCKS ADD ID INT IDENTITY
		-- CREATE NONCLUSTERED INDEX
		CREATE CLUSTERED INDEX IXCL_MONITORAMENTO_LOCKS_01 ON ##MONITORAMENTO_LOCKS(NESTED_LEVEL, BLOCKED_SESSION_COUNT DESC, WAIT_TIME_MS DESC)


    DECLARE
        @QT_SESSOES_BLOQUEADAS INT,
        @QT_SESSOES_BLOQUEADAS_TOTAL INT,
        @FL_ULTIMO_STATUS INT,
        @DT_ULTIMO_ALERTA DATETIME,
        @DS_MENSAGEM VARCHAR(MAX),
        @DS_ASSUNTO VARCHAR(100),

        -- CONFIGURAÇÕES DO MONITORAMENTO
        @QT_MINUTOS_LOCK INT = 0.1, -- ALTERAR O TEMPO EM MINUTOS AQUI
        @QT_MINUTOS_ENTRE_ALERTAS INT = 30,
        @EMAILUSUARIO VARCHAR(MAX) = 'cibelle@caed.ufjf.br'
    
	-- COUNT DAS SESSOES COM MAIS DE 3 MINUTOS
    SELECT 
        @QT_SESSOES_BLOQUEADAS = COUNT(*)
    FROM  ##MONITORAMENTO_LOCKS
    WHERE WAIT_TIME_MS > (60000 * @QT_MINUTOS_LOCK) -- CALCULO PARA TRANSFORMAR A QUANTIDADE DE MINUTOS EM MILISEGUNDOS
    AND BLOCKING_SESSION_ID IS NOT NULL

	--PRINT '@QT_SESSOES_BLOQUEADAS = ' + CAST(@QT_SESSOES_BLOQUEADAS AS VARCHAR(2))

	-- COUNT DE TODAS AS SESSIONS
    SELECT 
        @QT_SESSOES_BLOQUEADAS_TOTAL = COUNT(*)
    FROM ##MONITORAMENTO_LOCKS
    WHERE BLOCKING_SESSION_ID IS NOT NULL

	--PRINT '@QT_SESSOES_BLOQUEADAS_TOTAL = ' + CAST(@QT_SESSOES_BLOQUEADAS_TOTAL AS VARCHAR(2))
	
    SELECT 
        @FL_ULTIMO_STATUS = ISNULL(A.FL_TIPO, 0),
        @DT_ULTIMO_ALERTA = ISNULL(A.DT_ALERTA, '1900-01-01')
    FROM DBO.TB_ALERTA A WITH(NOLOCK)
    JOIN (SELECT MAX(ID_ALERTA) AS ID_ALERTA FROM DBO.TB_ALERTA WITH(NOLOCK) WHERE NM_ALERTA = 'BLOCK') B ON A.ID_ALERTA = B.ID_ALERTA

	--PRINT '@FL_ULTIMO_STATUS = ' + CAST(@FL_ULTIMO_STATUS AS VARCHAR(2))
	--PRINT '@DT_ULTIMO_ALERTA = ' + CAST(@DT_ULTIMO_ALERTA AS VARCHAR(50))

    SELECT
        @FL_ULTIMO_STATUS = ISNULL(@FL_ULTIMO_STATUS, 0),
        @DT_ULTIMO_ALERTA = ISNULL(@DT_ULTIMO_ALERTA, '1900-01-01')

	--PRINT '@FL_ULTIMO_STATUS = ' + CAST(@FL_ULTIMO_STATUS AS VARCHAR(2))
	--PRINT '@DT_ULTIMO_ALERTA = ' + CAST(@DT_ULTIMO_ALERTA AS VARCHAR(50))

    
    ------------------------------------
    -- ENVIA O CLEAR
    ------------------------------------

    IF (@FL_ULTIMO_STATUS = 1 AND @QT_SESSOES_BLOQUEADAS = 0)
    BEGIN
		SELECT 
            @DS_MENSAGEM = CONCAT('CLEAR: NÃO EXISTEM MAIS SESSÕES EM LOCK NA INSTÂNCIA ', @@SERVERNAME),
            @DS_ASSUNTO = 'CLEAR - [' + @@SERVERNAME + '] - LOCKS NA INSTÂNCIA'
       
        INSERT INTO DBO.TB_ALERTA (NM_ALERTA, DS_MENSAGEM, FL_TIPO, DT_ALERTA)
        SELECT
            'BLOCK',
            @DS_MENSAGEM,
            0,
            GETDATE()
        
        -- ENVIA ALERTA POR E-MAIL
        EXEC MSDB.DBO.SP_SEND_DBMAIL
            @PROFILE_NAME = 'DBA_MAIL',
            @RECIPIENTS = @EMAILUSUARIO,
            @SUBJECT = @DS_ASSUNTO,
            @BODY = @DS_MENSAGEM,
            @BODY_FORMAT = 'HTML',
            @FROM_ADDRESS = 'cibelle@caed.ufjf.br'
    END


    ------------------------------------
    -- ENVIA O TB_ALERTA
    ------------------------------------

    IF (@QT_SESSOES_BLOQUEADAS > 0 AND (@FL_ULTIMO_STATUS = 0 OR DATEDIFF(MINUTE, @DT_ULTIMO_ALERTA, GETDATE()) >= @QT_MINUTOS_ENTRE_ALERTAS))
    BEGIN
		SELECT 
            @DS_MENSAGEM = CONCAT('TB_ALERTA: EXISTE', (CASE WHEN @QT_SESSOES_BLOQUEADAS > 1 THEN 'M' ELSE '' END), ' ', CAST(@QT_SESSOES_BLOQUEADAS AS VARCHAR(10)), ' ', (CASE WHEN @QT_SESSOES_BLOQUEADAS > 1 THEN 'SESSÕES' ELSE 'SESSÃO' END), ' EM LOCK NA INSTÂNCIA ', @@SERVERNAME, ' HÁ MAIS DE ', CAST(@QT_MINUTOS_LOCK AS VARCHAR(10)), ' MINUTOS E ', CAST(@QT_SESSOES_BLOQUEADAS_TOTAL AS VARCHAR(10)), ' ', (CASE WHEN @QT_SESSOES_BLOQUEADAS_TOTAL > 1 THEN 'SESSÕES' ELSE 'SESSÃO' END), ' EM LOCK NO TOTAL'),
            @DS_ASSUNTO = 'TB_ALERTA - [' + @@SERVERNAME + '] - LOCKS NA INSTÂNCIA'

        --SELECT * FROM TB_ALERTA
        INSERT INTO DBO.TB_ALERTA (NM_ALERTA, DS_MENSAGEM, FL_TIPO, DT_ALERTA)
        SELECT
            'BLOCK',
            @DS_MENSAGEM,
            1,
            GETDATE()

	-- MONTA HTML
	DECLARE	@BACKGROUND AS VARCHAR(50) = '#C1FFC1', --'#7CFC00'--'#F0F8FF'                      			@MSG AS VARCHAR(MAX),                   			@QTROWS AS NUMERIC,                   			@ROWATUAL AS NUMERIC  
	/*
	** DEBUG **
	-- DECLARE @DS_MENSAGEM VARCHAR(MAX)  = 'TESTE',
			   @DS_ASSUNTO VARCHAR(100)   = 'TB_ALERTA - [' + @@SERVERNAME + '] - LOCKS NA INSTÂNCIA',
			   @EMAILUSUARIO VARCHAR(MAX) = 'cibelle@caed.ufjf.br'

	-- SELECT *  FROM ##MONITORAMENTO_LOCKS 
	-- SELECT * FROM TB_ALERTA
	*/

	SELECT @QTROWS = COUNT(*) FROM ##MONITORAMENTO_LOCKS	SET @ROWATUAL = 1
		-- MONTA O HEADER DA TABELA
	SET @MSG = ''	SET @MSG = '<HTML>'	SET @MSG = @MSG + '<HEAD>'	SET @MSG = @MSG + '<META HTTP-EQUIV="CONTENT-TYPE" CONTENT="TEXT/HTML; CHARSET=UTF-8">'                	SET @MSG = @MSG + '</HEAD>'                      	SET @MSG = @MSG + '<BODY>' -- SE QUISER MUDAR A COR DO FUNDO	SET @MSG = @MSG + '<TABLE STYLE=''FONT-SIZE: X-SMALL; FONT-STYLE: NORMAL'' BORDER=1 CELLPADDING=5 CELLSPACING=0>'                      	SET @MSG = @MSG + '<TR STYLE=''TEXT-DECORATION: UNDERLINE; COLOR : #363636''>' -- COR DA LINHA DO CABECALHO #7788AA	SET @MSG = @MSG + '<TD><B>NESTED_LEVEL</B></TD>'  --TESTE                    	SET @MSG = @MSG + '<TD><B>SESSION_ID</B></TD>'                      	SET @MSG = @MSG + '<TD><B>LOGIN_NAME</B></TD>'                      	SET @MSG = @MSG + '<TD><B>HOST_NAME</B></TD>'   	SET @MSG = @MSG + '<TD><B>PROGRAM_NAME</B></TD>'                      	SET @MSG = @MSG + '<TD><B>WAIT_INFO</B></TD>'                      	SET @MSG = @MSG + '<TD><B>WAIT_TIME_MS</B></TD>'                      	SET @MSG = @MSG + '<TD><B>BLOCKED_SESSION_ID</B></TD>'                      	SET @MSG = @MSG + '<TD><B>BLOCKED_SESSION_COUNT</B></TD>'     	SET @MSG = @MSG + '<TD><B>OPEN_TRANSACTION_COUNT</B></TD>'                      	SET @MSG = @MSG + '</TR>'  


	DECLARE @NESTED_LEVEL VARCHAR(100)
	DECLARE @SESSION_ID VARCHAR(100)
	DECLARE @LOGIN_NAME VARCHAR(100)
	DECLARE @HOST_NAME VARCHAR(255)
	DECLARE @PROGRAM_NAME VARCHAR(255)
	DECLARE @WAIT_INFO VARCHAR(100)
	DECLARE @WAIT_TIME_MS VARCHAR(100)
	DECLARE @BLOCKING_SESSION_ID VARCHAR(100)
	DECLARE @BLOCKED_SESSION_COUNT VARCHAR(100)
	DECLARE @OPEN_TRANSACTION_COUNT VARCHAR(100)


	PRINT 'LINHA ATUAL' + CAST(@ROWATUAL AS VARCHAR(10))	PRINT 'QUANTIDADE DE LINHAS' + CAST(@QTROWS AS VARCHAR(10))

	WHILE (@ROWATUAL <= @QTROWS)			BEGIN --<BEGIN WHILE>				SELECT					@NESTED_LEVEL			= CASE WHEN NESTED_LEVEL IS NULL THEN 'NULL' ELSE CAST(NESTED_LEVEL AS VARCHAR(100)) END,					@SESSION_ID				= CASE WHEN SESSION_ID IS NULL THEN 'NULL' ELSE  CAST(SESSION_ID AS VARCHAR(100)) END, 					@LOGIN_NAME				= CASE WHEN LOGIN_NAME IS NULL THEN 'NULL' ELSE  CAST(LOGIN_NAME AS VARCHAR(10)) END,					@HOST_NAME				= CASE WHEN HOST_NAME IS NULL THEN 'NULL' ELSE CAST(HOST_NAME AS VARCHAR(255)) END,					@PROGRAM_NAME			= CASE WHEN PROGRAM_NAME IS NULL THEN 'NULL' ELSE CAST(PROGRAM_NAME AS VARCHAR(255)) END,					@WAIT_INFO			    = CASE WHEN WAIT_INFO IS NULL THEN 'NULL' ELSE CAST(WAIT_INFO AS VARCHAR(100)) END,					@WAIT_TIME_MS			= CASE WHEN WAIT_TIME_MS IS NULL THEN 'NULL' ELSE CAST(WAIT_TIME_MS AS VARCHAR(100)) END,					@BLOCKING_SESSION_ID	= CASE WHEN BLOCKING_SESSION_ID IS NULL THEN 'NULL' ELSE CAST(BLOCKING_SESSION_ID AS VARCHAR(100)) END,					@BLOCKED_SESSION_COUNT	= CASE WHEN BLOCKED_SESSION_COUNT IS NULL THEN 'NULL' ELSE CAST(BLOCKED_SESSION_COUNT AS VARCHAR(100)) END,					@OPEN_TRANSACTION_COUNT	= CASE WHEN OPEN_TRANSACTION_COUNT IS NULL THEN 'NULL' ELSE CAST(OPEN_TRANSACTION_COUNT AS VARCHAR(100)) END				FROM  ##MONITORAMENTO_LOCKS				WHERE ID = @ROWATUAL;
	-- SELECT * FROM ##MONITORAMENTO_LOCKS

			SET @MSG = @MSG + '<TR STYLE=''FONT-SIZE: X-SMALL; BACKGROUND-COLOR:' + @BACKGROUND + '  ;FONT-STYLE: NORMAL''>'			SET @MSG = @MSG + '<TD>' + @NESTED_LEVEL + '</TD>'			SET @MSG = @MSG + '<TD>' + @SESSION_ID	 + '</TD>'			SET @MSG = @MSG + '<TD>' + @LOGIN_NAME   + '</TD>'			SET @MSG = @MSG + '<TD>' + @HOST_NAME    + '</TD>'			SET @MSG = @MSG + '<TD>' + @PROGRAM_NAME + '</TD>'			SET @MSG = @MSG + '<TD>' + @WAIT_INFO    + '</TD>'			SET @MSG = @MSG + '<TD>' + @WAIT_TIME_MS + '</TD>'			SET @MSG = @MSG + '<TD>' + @BLOCKING_SESSION_ID    + '</TD>'			SET @MSG = @MSG + '<TD>' + @BLOCKED_SESSION_COUNT  + '</TD>'			SET @MSG = @MSG + '<TD>' + @OPEN_TRANSACTION_COUNT + '</TD>'			SET @MSG = @MSG + '</TR>'
					SET @ROWATUAL = @ROWATUAL + 1
			PRINT 'LINHA ATUAL' + CAST(@ROWATUAL AS VARCHAR(10))
	END --<END WHILE>
			SET @MSG = @MSG + '</TABLE></BODY></HTML>'
	SELECT @MSG AS MGS
	
	SET @DS_MENSAGEM += '<BR><BR>' + @MSG

	EXEC MSDB.DBO.SP_SEND_DBMAIL		@PROFILE_NAME = 'DBA_MAIL',		@RECIPIENTS = @EMAILUSUARIO,		@SUBJECT = @DS_ASSUNTO,                      		--@BODY = @MSG,                      		@BODY = @DS_MENSAGEM,                      		@BODY_FORMAT = 'HTML',
        @FROM_ADDRESS = 'cibelle@caed.ufjf.br'    
END

















